{"version":3,"sources":["Components/Layout/layout.js","Components/Nav/Nav.js","Axios/axios.js","Config/config.js","Actions/actions.js","Actions/types.js","Components/Product/List.js","Components/Filter/Filter.js","Containers/Products/products.js","Containers/Likes/Likes.js","Components/Comments/List.js","Containers/Comments/Comments.js","App.js","serviceWorker.js","Reducers/Main/index.js","Reducers/index.js","Components/Error/Errorcomponent/Errorcomponent.js","Components/Error/Errorboundary/Errorboundary.js","index.js"],"names":["Layout","props","react_default","a","createElement","className","children","Nav","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","width","height","viewBox","xmlns","fill","fillRule","d","id","Link","to","ApiInstance","axios","create","baseURL","headers","Authorization","concat","getProducts","date","dispatch","payload","get","then","response","data","posts","length","getComments","postid","offset","getState","getCurrentState","comments","main","Object","toConsumableArray","voteUp","post","Planetlist","_this","this","map","key","style","marginBottom","fload","src","thumbnail","image_url","alt","name","tagline","onClick","voteUpHandler","aria-hidden","votes_count","comments_count","React","Component","Filter","callback","backgroundColor","onSubmit","searchHandler","event","preventDefault","placeholder","onChange","e","changeHandler","target","value","defaultValue","Products","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","defaultDate","Date","toLocaleDateString","dateChangeHandler","bind","assertThisInitialized","unVoteHandler","setState","isNaN","layout","Components_Nav_Nav","Components_Filter_Filter","List","products","connect","Mylikes","userid","votes","vote","likes","Commentlist","comment","marginTop","body","Comments","loadMoreHandler","pid","_this2","console","log","Comments_List","App","BrowserRouter","basename","process","Switch","Route","path","context","Containers_Comments_Comments","match","params","component","exact","Boolean","window","location","hostname","Main","arguments","undefined","action","objectSpread","rootReducer","combineReducers","Errorcomponent","role","ErrorBoundary","hasError","error","info","Error_Errorcomponent_Errorcomponent","createStoreWithMiddleware","applyMiddleware","reduxThunk","createStore","ReactDOM","render","es","store","reducers","Errorboundary","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97dd0756.chunk.js","sourcesContent":["import React from 'react';\nconst Layout = (props) =>{\n\n    return (\n        <div className=\"container\">\n        {props.children}\n      </div>\n    );\n}\n\nexport default Layout;","import React from 'react';\nimport {Link } from 'react-router-dom';\n\nconst Nav = (props) =>{\n  \n    return(\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light rounded\">\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample10\" aria-controls=\"navbarsExample10\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path d=\"M40 20c0 11.046-8.954 20-20 20S0 31.046 0 20 8.954 0 20 0s20 8.954 20 20\" fill=\"#DA552F\"></path>\n          <path d=\"M22.667 20H17v-6h5.667a3 3 0 0 1 0 6m0-10H13v20h4v-6h5.667a7 7 0 1 0 0-14\" fill=\"#FFF\"></path>\n        </g>\n      </svg>\n      <div className=\"collapse navbar-collapse justify-content-md-center\" id=\"navbarsExample10\">\n        <ul className=\"navbar-nav\">          \n          <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">Home</Link>\n          </li>\n          <li className=\"nav-item\">            \n            <Link to=\"/my-likes\" className=\"nav-link\">Likes</Link>\n          </li>          \n        </ul>\n      </div>\n    </nav>\n    );\n}\n\nexport default Nav;","import axios from 'axios';\nimport {API_BASE_URL, ACCESS_TOKEN} from '../Config/config';\n\nconst ApiInstance = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {'Authorization': `Bearer ${ACCESS_TOKEN}`}\n  });\n\n\n  export default ApiInstance;","export const API_BASE_URL = 'https://api.producthunt.com/v1/';\nexport const ACCESS_TOKEN = '1ea43068072b29c813e7b9503132dd915247a0ee96696e896429d2e8f005a651';\nexport const USER_ID = 1637884;","import axios from '../Axios/axios';\nimport {PRODUCTS,MY_LIKES,COMMENTS} from './types';\n\n\nexport const getProducts = (date) =>{\n    return (dispatch) => {          \n        dispatch({ type: PRODUCTS, payload:[]}); \n        dispatch({ type: COMMENTS, payload:[]});           \n        return axios.get(`posts?day=${date}`)\n        .then( response => {                              \n            if(response.data.posts.length > 0){\n                return response.data.posts;\n            }else{\n                return [];\n            }                                                                                                                                               \n         })\n         .then( posts => {\n            dispatch({ type: PRODUCTS, payload:posts}); \n         });\n    }\n}   \n\nexport const getMyLikes = (userid) =>{\n    return (dispatch) => {                   \n        dispatch({ type: COMMENTS, payload:[]}); \n        dispatch({ type: MY_LIKES, payload:[]}); \n        return axios.get(`users/${userid}/votes`)\n        .then( response => {                             \n            if(response.data.votes.length > 0){\n               //format data\n               return  response.data.votes.map( vote => vote.post);               \n            }else{\n                return [];\n            }                                                                                                                                               \n         })\n         .then( votes => {\n            dispatch({ type: MY_LIKES, payload:votes}); \n         });\n    }\n} \nexport const getComments = (postid,offset) =>{\n    return (dispatch,getState) => {                 \n        return axios.get(`comments?search[post_id]=${postid}&per_page=5&page=${offset}&sort_by=updated_at`)\n        .then( response => {                  \n            const getCurrentState = getState();                               \n            if(response.data.comments.length > 0){\n                if(getCurrentState.main.comments){                    \n                    return  [...getCurrentState.main.comments,...response.data.comments];    \n                }else{\n                    return response.data.comments;\n                }                                         \n            }else{\n                return [...getCurrentState.main.comments];\n            }                                                                                                                                               \n         })\n         .then( comments => {\n            dispatch({ type: COMMENTS, payload:comments}); \n         });\n    }\n}\n\nexport const voteUp = (postid) =>{\n    return (dispatch) => {                            \n        return axios.post(`posts/${postid}/vote`)\n         .then( response => {\n            \n         });\n    }\n}   \n\nexport const unVote = (postid) =>{\n    return (dispatch) => {                            \n        return axios.delete(`posts/${postid}/vote`)\n         .then( response => {\n            \n         });\n    }\n} ","export const PRODUCTS = 'products';\nexport const MY_LIKES = 'likes';\nexport const COMMENTS = 'comments';","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Planetlist extends React.Component{\n    \n    render(){\n    return(\n        <div className=\"post-container\">\n        {this.props.posts.map((post)=>{\n          return (\n          <div className=\"card\" \n               key={post.id} \n               style={{marginBottom:\"5px\"}}                \n               >          \n               \n            <div className=\"card-body\" style={{fload:\"left\"}}>\n            <div className=\"row\">     \n            <div className=\"col-sm\">     \n            <img className=\"card-img-top\" src={post.thumbnail.image_url} alt={post.name} style={{fload:\"left\"}}/>\n            </div>\n            <div className=\"col-sm\">  \n            <Link to={`/post/${post.id}/comments`}>\n                <h5 className=\"card-title\">{post.name}</h5>\n                <div>{post.tagline}</div>\n            </Link>\n            <span className=\"badge badge-secondary\" onClick={ () => this.props.voteUpHandler(post.id)}>\n                <i className=\"fa fa-caret-up\" aria-hidden=\"true\"></i>\n                &nbsp;{post.votes_count}\n            </span>&nbsp;\n            <span className=\"badge badge-secondary\">\n                <i className=\"far fa-comments\" aria-hidden=\"true\"></i>\n                &nbsp;{post.comments_count}\n            </span>\n            </div>\n            </div>\n            </div>\n          </div>\n        )\n        })}   \n        </div>     \n    );\n}\n}\n\nexport default Planetlist;","import React from 'react';\n\nconst Filter =(props) =>{\n    const withoutEventDefault = callback => event => {   \n        event.preventDefault()\n        callback()\n      }\n    return(\n        <div className=\"card\" style={{backgroundColor:\"#f8f9fa!important\"}}>\n            <div className=\"row justify-content-center card-body\">        \n                <form className=\"form-inline my-2 my-lg-0\" onSubmit={withoutEventDefault(props.searchHandler)}>        \n                    <input className=\"form-control mr-sm-2\" \n                           type=\"search\" placeholder=\"yyyy/mm/dd\" \n                           onChange={ e => props.changeHandler(e.target.value)}\n                           defaultValue={props.date}/>\n                    <button className=\"btn btn-outline-primary my-2 my-sm-0 filter-btn\" type=\"submit\">Search</button>\n                </form>        \n            </div>\n        </div>\n    );\n}\n\nexport default Filter;","import React from 'react';\nimport {connect} from 'react-redux';\nimport Layout from '../../Components/Layout/layout';\nimport Nav from '../../Components/Nav/Nav';\nimport {getProducts,voteUp,unVote} from '../../Actions/actions';\nimport ProductList from '../../Components/Product/List';\nimport Filter from '../../Components/Filter/Filter';\n\n\nclass Products extends React.Component{\n\n   constructor(props){\n       super(props);\n       this.state = {\n           date: null\n       }\n      this.defaultDate = new Date().toLocaleDateString();\n      this.dateChangeHandler = this.dateChangeHandler.bind(this);\n      this.searchHandler = this.searchHandler.bind(this);\n      this.unVoteHandler = this.unVoteHandler.bind(this);\n      this.voteUpHandler = this.voteUpHandler.bind(this);\n   }\n\n   componentDidMount(){\n      this.props.dispatch(getProducts(this.defaultDate));\n   }\n   voteUpHandler(postid){\n    this.props.dispatch(voteUp(postid));\n   }\n   unVoteHandler(postid){\n    this.props.dispatch(voteUp(postid));\n   }\n   dateChangeHandler(date){\n      this.setState({date});\n   }\n   searchHandler(){\n    let date = new Date(this.state.date);\n    if(date instanceof Date && !isNaN(date)){\n        this.props.dispatch(getProducts(date.toLocaleDateString()));  \n    }\n   }\n\n    render(){\n  \n        return(\n            <Layout>\n                <Nav />\n                <br/>\n                <Filter date={this.state.date} \n                        searchHandler={this.searchHandler}\n                        changeHandler={this.dateChangeHandler}/>\n                <br />\n                <ProductList posts={this.props.products || []} \n                             voteUpHandler={this.voteUpHandler}\n                             unVoteHandler={this.unVoteHandler}\n\n                />\n            </Layout>\n        );\n    }\n}\nfunction mapStateToProps(state){\n    return {\n        products : state.main.products,                     \n        }\n}\n\nexport default connect (mapStateToProps,null)(Products);","import React from 'react';\nimport {connect} from 'react-redux';\nimport Layout from '../../Components/Layout/layout';\nimport Nav from '../../Components/Nav/Nav';\nimport {getMyLikes} from '../../Actions/actions';\nimport ProductList from '../../Components/Product/List';\nimport {USER_ID} from '../../Config/config';\n\n\nclass Mylikes extends React.Component{\n\n   componentDidMount(){\n      this.props.dispatch(getMyLikes(USER_ID));\n   }\n    render(){\n  \n        return(\n            <Layout>\n                <Nav />  \n                <br />              \n                <ProductList posts={this.props.likes || []} \n                             voteUpHandler={this.voteUpHandler}\n                             unVoteHandler={this.unVoteHandler}\n\n                />\n            </Layout>\n        );\n    }\n}\nfunction mapStateToProps(state){\n    return {\n        likes : state.main.likes,                     \n        }\n}\n\nexport default connect (mapStateToProps,null)(Mylikes);","import React from 'react';\n\nconst Commentlist = (props) => {\n  \n\n    return (\n\n        props.comments.map( comment =>{\n            return (\n            <div className=\"card\" key={comment.id} style={{marginTop:\"5px\"}}>\n                  <div className=\"card-body\">\n                    {/* <h5 className=\"card-title\">{comment.name}</h5> */}\n                    <div>{comment.body}</div>\n                  </div>\n            </div> )\n        })\n    );\n}\n\nexport default Commentlist;","import React from 'react';\nimport {connect} from 'react-redux';\nimport Layout from '../../Components/Layout/layout';\nimport Nav from '../../Components/Nav/Nav';\nimport {getComments} from '../../Actions/actions';\nimport Commentslist from '../../Components/Comments/List';\n\n\nclass Comments extends React.Component{\n\n   constructor(props){\n       super(props);\n       this.state = {\n           offset:1\n       } \n       this.loadMoreHandler = this.loadMoreHandler.bind(this);     \n   }\n\n   componentDidMount(){\n      this.props.dispatch(getComments(this.props.pid,this.state.offset));\n   }\n   loadMoreHandler(){\n     this.setState( state=> {\n         return {offset:state.offset+1}\n     },() => { \n         console.log(\"[offset]\",this.state);\n         this.props.dispatch(getComments(this.props.pid,this.state.offset))\n        });\n   }\n    render(){\n        console.log(\"[render comment]\",this.props);\n        return(\n            <Layout>\n                <Nav />  \n                <br />              \n                <Commentslist comments={this.props.comments || []} />\n                <br /> \n                <div className=\"d-flex justify-content-center\">\n                    <button type=\"button\" className=\"btn btn-success\" onClick={this.loadMoreHandler}>Load More</button>\n                </div>\n            </Layout>\n        );\n    }\n}\nfunction mapStateToProps(state){\n    return {\n        comments : state.main.comments,                     \n        }\n}\n\nexport default connect (mapStateToProps,null)(Comments);","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, BrowserRouter} from 'react-router-dom';\nimport Products from './Containers/Products/products';\nimport Mylikes from './Containers/Likes/Likes';\nimport Comments from './Containers/Comments/Comments';\n\n\n\nclass App extends Component {\n\n  \n  render() {\n    return (\n      <BrowserRouter  basename={process.env.PUBLIC_URL}>      \n      <Switch>                      \n      <Route path=\"/post/:pid/comments\">\n          {( context ) => (\n              <Comments pid={ context.match.params.pid }/>\n          )}\n      </Route>      \n      <Route path=\"/my-likes\" component={Mylikes} />\n      <Route path=\"/\" exact component={Products} />        \n      </Switch>      \n    </BrowserRouter>    \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {  PRODUCTS, MY_LIKES, COMMENTS} from '../../Actions/types';\nconst Main = (state = {}, action) => {\n    switch(action.type) {\n        case PRODUCTS:\n        return { ...state, products: action.payload };  \n        case MY_LIKES:\n        return { ...state, likes: action.payload };  \n        case COMMENTS:\n        return { ...state, comments: action.payload };          \n        default:\n          return state;\n      }\n}\nexport default Main;","import { combineReducers } from 'redux';\nimport main from './Main/index';\n\n\n\nconst rootReducer = combineReducers({    \n    main\n});\n\nexport default rootReducer;","import React from 'react';\n\nconst Errorcomponent = (props) =>{\n  \n    return(\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {props.children}\n        </div>\n    );\n}\nexport default Errorcomponent;","import React from 'react';\nimport Errorcomponent from '../Errorcomponent/Errorcomponent';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return { hasError: true };\n    }\n  \n    componentDidCatch(error, info) {\n      // You can also log the error to an error reporting service\n      //logErrorToMyService(error, info);\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        // You can render any custom fallback UI\n        return <Errorcomponent>Something went wrong.</Errorcomponent>;\n      }\n  \n      return this.props.children; \n    }\n  }\n\n  export default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './Reducers/index.js';\nimport ErrorBoundary from './Components/Error/Errorboundary/Errorboundary';\n\nconst createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\n\nReactDOM.render(\n<Provider store={createStoreWithMiddleware(reducers)}>\n<ErrorBoundary><App /></ErrorBoundary>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}